// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);              // if op-code is 0 so it's A instruction
    Not(in=Ainstruction,out=Cinstruction);                  // if op-code is 1 so it's C instruction

    Mux16(a=ALUout ,b=instruction ,sel=Ainstruction ,out=inA); // instruction handling
    
    And(a=instruction[5], b=Cinstruction, out=d1);          // if it's C instruction then d1 indicates that the value is stored in A register
    Or(a=d1, b=Ainstruction, out=loadA);                    // loadA indicates that the value is stored in A register
    ARegister(in=inA ,load=loadA ,out=outA, out[0..14]=addressM);

    Mux16(a=outA ,b=inM ,sel=instruction[12] ,out=AorM);

    And(a=instruction[4], b=Cinstruction, out=d2);         // if it's C instruction then d2 indicates that the value is stored in D register
    DRegister(in=ALUout ,load=d2 ,out=outD);

    ALU(x=outD ,y=AorM ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=ALUout, out=outM ,zr=zero ,ng=negative);

    And(a=instruction[3], b=Cinstruction, out=writeM);      // Check if its C instruction and d3 destination bit is one

    Not(in=zero, out=notZero);                                  // ALUout != 0
    Not(in=negative, out=notNegative);                          // ALUout >= 0
    And(a=notZero, b=notNegative, out=positive);                // ALUout > 0
    And(a=instruction[0], b=positive, out=jumpPositive);        // Check if j3 and ALUout > 0
    And(a=instruction[1], b=zero, out=jumpZero);                // Check if j2 and ALUout = 0
    And(a=instruction[2], b=negative, out=jumpNegative);        // Check if j1 and ALUout < 0
    And(a=instruction[0] ,b=instruction[1] ,out=j3Andj2);       // Check if j3 and j2 is one
    And(a=j3Andj2 ,b=instruction[2] ,out=jumpUnconditional);    // Check if j3, j2 and j1 is one
    Or(a=jumpPositive, b=jumpZero, out=jumpPositiveOrZero);     // Check if one of the jump conditions happens
    Or(a=jumpPositiveOrZero, b=jumpNegative, out=jumpPosOrZeroOrNeg);
    Or(a=jumpPosOrZeroOrNeg ,b=jumpUnconditional, out=jumpIf);
    And(a=jumpIf, b=Cinstruction, out=jump);                    // Check if it's C instruction and one of the jump conditions happens.
    PC(in=outA ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc);   // Emits the address of the next instruction
}